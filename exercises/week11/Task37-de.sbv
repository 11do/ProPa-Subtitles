0:00:00.713,0:00:10.804
Bei der Aufgabe 37 sollen wir jetzt den Algorithmus aus der Vorlesung verwenden,
um ein minimales Herbrand-Modell zu finden, für unser Programm.

0:00:11.409,0:00:20.310
In diesem Fall, mit unserem Programm heißt das einfach nur, dass wir also sozusagen die
Menge aller Fakten, die sich aus dem Programm ableiten lassen, feststellen.

0:00:21.087,0:00:27.570
Also im Endeffekt haben wir dann alles da drinstehen, was
man aus den Fakten, die schon im Programm stehen und den Regeln ableiten kann.

0:00:28.542,0:00:36.507
Um das zu machen, benutzen wir jetzt diesen Algorithmus, wo man den "Immediate
Consequence Operator" benutzt, dieses T_p.

0:00:38.018,0:00:46.317
Man benutzt dieses T_p jetzt einfach immer wieder, zuerst auf die leere Menge und dann
auf die Menge die man dann herausbekommt, wenn man das T_p das erste Mal angewandt hat.

0:00:46.511,0:00:51.430
Dann darauf (immer) wieder T_p,
solange bis wir unsere Schrittanzahl haben, die wir hier gefordert hatten.

0:00:51.862,0:00:54.351
Man soll hier die ersten drei Iterationen durchführen.

0:00:58.367,0:01:02.062
Wie das jetzt funktioniert ist, wir haben dieses T_p immer auf eine Menge angewandt.

0:01:02.796,0:01:09.551
Die Menge ist halt am Anfang einfach gar nichts, die leere Menge. danach ist das immer
unsere Faktenbasis, die wir aus dem letzten Schritt bekommen haben.

0:01:10.911,0:01:12.465
Wenn wir das jetzt mal machen...

0:01:13.264,0:01:23.287
Also wir haben unser erstes T_p von der leeren Menge. Also unsere Faktenmenge am Anfang
ist einfach nichts, wir haben keine Fakten und wir haben das Programm.

0:01:27.929,0:01:34.534
Das wäre jetzt einfach die Menge aller Fakten,
die im Programm eh schon drin stehen. Da wir nichts haben...

0:01:34.814,0:01:42.000
Wir können also jetzt noch nicht auf irgendwelche Fakten zurückgreifen,
die wir schon hätten, sondern müssen jetzt einfach die nehmen,
die schon im Programm stehen.

0:01:42.000,0:01:46.329
Hier haben wir halt ein paar Fakten: Wir haben hier mehrfach
ingredient mit mehreren Zutaten:

0:01:46.475,0:01:53.823
wir haben veggie und wir haben carbs und ein compose und die werden jetzt alle in unser
erstes T_p gepackt.

0:01:54.276,0:01:59.288
Das ist immer der erste Schritt, wenn man von der leeren Menge das T_p macht. Da muss man
einfach alle Fakten aus dem Programm herausschreiben.

0:02:00.648,0:02:04.494
Da man die direkt aus dem Programm nehmen kann,
ohne irgendwas wissen zu müssen, vorher.

0:02:04.494,0:02:12.106
Und alles was irgendwelche Variablen enthält, wie hier dieses compose(X,Y) oder
sidedish, fullmeal, können wir alles noch nicht ableiten,...

0:02:12.106,0:02:25.707
weil wir ja noch nichts für X,Y oder andere Variablen haben,
was wir hier einsetzen können. Deswegen können wir das noch nicht ableiten.

0:02:26.183,0:02:34.095
Also beim ersten Schritt kopieren wir einfach alle Fakten raus
und die sind dann in unserer Menge drin.

0:02:47.871,0:02:52.762
So und jetzt ist das eigentlich immer der gleiche Ablauf.

0:02:53.021,0:03:03.290
In jedem Durchlauf von diesem T_p werden wir jetzt einfach nur die Fakten benutzen, die
wir schon haben, was jetzt hier in dem Fall diese hier sind...

0:03:03.376,0:03:09.669
und daraus dann versuchen neue Fakten abzuleiten, indem wir in diese Regeln hier unsere
bereits herausgefundenen Fakten einsetzen.

0:03:13.174,0:03:18.199
Und das nächste T_p ist dann einfach nur das, was wir neu rausbekommen,
vereinigt mit dem, was wir schon vorher hatten.

0:03:19.106,0:03:28.042
Ich benenne das jetzt noch mal irgendwie um... Nennen wir das mal das Tp_1.

0:03:31.043,0:03:35.705
Sonst haben wir ja gleich sehr viele verschachtelte T_ps, was vielleicht ein bisschen
verwirrt. Also gebe ich dem jetzt mal einen Namen.

0:03:37.432,0:03:43.465
Dann können wir unser zweites Tp berechnen, Tp_2.

0:03:44.945,0:03:54.208
Das wäre dann gerade unser erstes T_p und davon machen wir dann noch eins.

0:03:54.726,0:04:02.274
Also wir geben die Menge, die wir dabei herausbekommen haben, erneut in dieses T_p ein
und dann bekommen wir eine neue Menge an Fakten.

0:04:17.691,0:04:21.501
So, das wäre dann jetzt in dem Fall erstmal unser erstes Tp, T_p1...

0:04:23.272,0:04:26.591
und ich mache jetzt hier ein "U", das soll die Vereinigung sein, in der Mengen-Notation.

0:04:26.591,0:04:33.985
Also wir vereinigen unser erstes T_p, das wir ausgerechnet hatten, jetzt mit den neuen
Fakten, die wir jetzt gewinnen können, indem wir das hier einsetzen.

0:04:36.000,0:04:40.684
Da müssen jetzt gucken... Erstmal können wir jetzt alles ignorieren,
was hier Fakten sind, denn die haben wir ja schon.

0:04:41.008,0:04:48.000
Also bis hierher... Apropos ich hab eben das compose hier vergessen, das fügen wir jetzt
noch schnell hinzu.

0:04:51.217,0:04:57.358
Jetzt müssen wir einfach unsere Fakten hier einsetzen: Wir
gucken uns jetzt an, jeweils, wann ist irgendwas in compose?

0:04:58.179,0:05:06.000
Dann haben wir compose(X,Y) gilt halt genau dann,
wenn wir ein veggie haben, das ist das X und ingredient ist das Y.

0:05:06.669,0:05:12.000
Jetzt gucken wir einfach, was wir in unserer Faktenbasis haben, was das befriedigt.

0:05:12.972,0:05:23.391
Also wir haben hier nur zwei veggies, einmal salad, einmal carrot
und wir haben mehrere ingredients, eigentlich alles was wir hier drin hatten, an
Konstanten, war ingredient.

0:05:24.319,0:05:26.728
Das heißt wir können das alles kombinieren mit dem compose.

0:05:27.505,0:05:36.145
Also fangen wir an, von oben. Das erste veggie, was wir haben ist salad.
Also haben wir compose(salad,...) und dann noch was.

0:05:38.585,0:05:41.180
Da müssen wir jetzt einfach jedes einzelne ingredient einsetzen, was wir haben.

0:05:41.180,0:05:49.132
Also das wäre jetzt hier auch einmal salad selber, weil es ist auch ein ingredient, das
steht hier und da steht ja auch nirgendwo hier, das X nicht Y sein darf.

0:05:49.132,0:05:51.281
Also gehen auch die gleichen Sachen.

0:05:52.469,0:05:58.064
Einmal compose(salad,salad)... Ich gehe jetzt einfach von oben durch... Salami...

0:06:00.000,0:06:01.635
Punkt nicht vergessen...

0:06:04.010,0:06:15.418
Einmal carrot, einmal steak und einmal fries.

0:06:18.096,0:06:26.639
Das Gleiche müssen wir jetzt nochmal machen, und zwar: Alles nochmal, aber dafür dann
mit carrot, das ist ja auch ein veggie.

0:06:28.971,0:06:35.730
Da gilt das jetzt natürlich alles nochmal, nur das wir salad mit carrot ersetzen, weil
dann haben wir immer noch ein veggie als X und die ingredients sind die gleichen.

0:06:36.961,0:06:42.397
Also müssen wir das alles hier jetzt copy pasten, in dem Fall. Ansonsten müsste man das
mehrfach aufschreiben.

0:06:43.325,0:06:46.166
Dann ersetzen wir einfach überall salad mit carrot.

0:07:01.554,0:07:05.249
So, dann haben wir jetzt noch eine zweite compose-Regel: Da steht vorne ein carb.

0:07:06.000,0:07:14.953
Also X ist ein carb und dann ist Y wieder ein ingredient.
Wir haben nur einen carb, nämlich fries.

0:07:15.212,0:07:26.023
Dann haben wir jetzt wieder alles, aber diesmal müssen wir aufpassen:
Wir haben ja hier schon einmal compose(fries,steak). Das würde jetzt auch hier
reinfallen, weil fries ist ein carb und steak ist ein ingredient.

0:07:26.023,0:07:30.348
Aber da wir das ja schon hatten, beim ersten Durchlauf,
kommt das natürlich nicht nochmal hier rein.

0:07:32.680,0:07:36.822
Also das hatten wir schon, das müssen wir es jetzt also nicht noch mal aufführen, aber
alle anderen Sachen brauchen wir.

0:07:36.822,0:07:41.807
Da nehmen wir uns jetzt alles und dann streichen wir das steak raus...

0:07:43.815,0:07:49.520
steak brauchen wir nicht und ansonsten tauschen wir alles aus gegen fries.

0:07:59.906,0:08:07.239
Ok, jetzt haben wir die ganzen composes gemacht, jetzt haben wir noch sidedish.

0:08:07.239,0:08:13.591
Da brauchen wir aber compose für und veggie oder compose und carbs.

0:08:15.448,0:08:18.989
und man darf jetzt nicht den Fehler machen, jetzt die Sachen zu nutzen, die wir hier
gerade gemacht haben.

0:08:18.989,0:08:22.249
Man darf in dem Schritt, in dem man gerade ist immer nur die vorherigen Fakten verwenden.

0:08:22.249,0:08:26.219
Also wir können jetzt nicht einfach unsere compose nutzen, die wir hier gerade erst
abgeleitet haben ...

0:08:26.802,0:08:30.707
und damit jetzt irgendwas mit sidedish machen, sondern müssen halt alles nehmen, was wir
im vorherigen Schritt hatten.

0:08:31.160,0:08:33.525
Also nur diese Fakten die wir hier haben.

0:08:34.036,0:08:41.826
Und da wir hier nur einen einzigen compose hatten und das war fries und steak...
Und das erfüllt keines von beiden hier:

0:08:41.826,0:08:49.912
Einmal haben wir compose und das Y muss ein veggie sein.
Das haben wir nicht, das steak ist kein veggie. Es ist auch kein carb, beim zweiten hier.

0:08:49.912,0:08:51.496
Das heißt wir können da jetzt noch nichts machen.

0:08:52.403,0:08:59.904
Genauso bei fullmeal, da brauchen wir zweimal sidedish, das haben wir aber nur einmal und
das erfüllt auch nicht diese beiden Bedingungen, die wir hier haben, ...

0:08:59.904,0:09:05.467
nämlich das einmal sidedish(X,Y)
und dann nochmal sidedish(Y,Z) gilt, das haben wir nicht.

0:09:06.000,0:09:09.692
Also können wir nichts weiter machen. Das wäre also unser zweites Tp.

0:09:10.491,0:09:15.957
Jetzt haben wir noch einen dritten Schritt zu machen. Das ist jetzt das Gleiche, was wir
gerade gemacht haben, nach dem gleichen Schema.

0:09:19.110,0:09:24.109
Das ist unserer T_p3, also wieder ein neues T_p hiervon.

0:09:34.877,0:09:40.914
Das wäre also T_p2 vereinigt mit den neuen Fakten.

0:09:45.039,0:09:48.624
Das hier ist übrigens... Dieser Unterstrich soll übrigens sein...

0:09:50.775,0:09:53.172
Oh, das ist falsch geschrieben. Das war ja so...

0:09:53.286,0:10:00.437
Also dieser Unterstrich hier soll eigentlich nur bedeuten, dass das p niedriger gestellt
ist. Das war in der Vorlesung, glaube ich, auch so aufgeschrieben.

0:10:00.739,0:10:06.181
Eigentlich würde das hier ein T mit einem niedriggestellten p sein, wenn ihr das formal,
schriftlich aufschreiben würdet.

0:10:08.858,0:10:11.641
Jetzt müssen wir nur noch mal die ganzen Fakten durchgehen.

0:10:13.045,0:10:15.847
Also, das hier können wir wieder alles ignorieren, das haben wir ja schon.

0:10:16.386,0:10:19.250
Mit compose kann man auch nichts weiter machen, das haben wir ja alles schon abgehakt.

0:10:19.250,0:10:21.637
Jetzt müssen wir nur noch sidedish und fullmeal beachten.

0:10:23.084,0:10:30.000
Einmal bei sidedish, da haben wir jetzt compose(X,Y) muss gelten, für sidedish(X,Y) und
das y muss ein veggie sein.

0:10:31.080,0:10:35.617
Also müssen wir jetzt alles ansehen, was wir haben mit compose,
wo hinten ein veggie ist.

0:10:37.366,0:10:40.974
Da haben wir einmal eines mit salad hinten und einmal mit carrot hinten.

0:10:42.291,0:10:44.967
Also müssen wir alles rauschreiben, wo hinten salad und carrot steht.

0:10:54.322,0:10:56.223
Dann haben wir hier einmal sidedish mit zweimal salad...

0:11:00.000,0:11:02.870
Dann haben wir als nächstes salad mit carrot...

0:11:09.224,0:11:14.369
Dann haben wir als nächstes carrot mit salad.

0:11:19.761,0:11:23.433
Dann carrot mit carrot...

0:11:32.070,0:11:34.510
Und fries mit salad und fries mit carrot.

0:11:47.358,0:11:49.639
So, dann haben wir alles mit veggies hinten dabei.

0:11:50.222,0:11:54.831
Dann haben wir das gleiche nochmal mit carbs hinten, also alles wo fries hinten steht.

0:11:58.977,0:12:01.091
Das heißt (wir schreiben) jetzt alles nochmal, nur mit fries:

0:12:01.091,0:12:09.862
salad mit fries... carrot mit fries... und fries selber mit fries.

0:12:13.922,0:12:17.171
So, jetzt müssen wir alles haben, was man hier mit sidedish machen konnte.

0:12:18.423,0:12:27.188
Wir haben uns alles herausgeholt, was man da holen konnte,
wenn man mit compose vergleicht und unseren vorherigen veggie-Fakten,
die wir schon ganz am Anfang hatten und das carbs.

0:12:28.138,0:12:32.691
Jetzt müssen wir noch das fullmeal überprüfen. Da brauchen wir zweimal sidedish für.

0:12:33.619,0:12:37.949
Das hatten wir jetzt aber noch nicht im vorherigen Schritt, das haben wir ja gerade erst
hinzugefügt. Also kann man da jetzt noch nichts machen, bei fullmeal.

0:12:38.834,0:12:41.451
Dann wären wir hier jetzt auch schon fertig. Das wäre unser dritter Schritt.

0:12:42.000,0:12:47.333
Damit wäre die Aufgabe jetzt schon vorbei, aber man könnte jetzt natürlich noch weiter
machen. Einen vierten Schritt gibt es noch.

0:12:47.441,0:12:55.591
Da würde man jetzt die ganzen fullmeals noch aufschreiben.
Das würde ziemlich lange dauern dann, das ist ziemlich viel.

0:12:56.649,0:13:11.545
Wir müssten jetzt alles kombinieren, wo man tatsächlich die zwei sidedish haben,
wo das letzte vom ersten und das erste vom zweiten das Gleiche ist,
z. B. sidedish(salad, salad) und sidedish(salad,fries).

0:13:11.739,0:13:13.777
Dann müssen wir die ganzen Kombinationen noch aufschreiben.

0:13:13.971,0:13:22.443
Nach dem vierten Schritt gäbe dann natürlich nichts mehr, was man hinzufügen kann.
Also wenn man da noch einen fünften Schritt machen würde, dann hätten wir einfach nur
genau das Gleiche raus, was wir vorher schon hatten.

0:13:22.702,0:13:27.605
Also T_p5 wäre genau das gleich wie T_p4 und dann kann man aufhören.

0:13:28.318,0:13:33.418
Oder wenn in der Aufgabe steht, dass man nur drei Schritte machen soll,
dann hört man natürlich schon vorher auf. Man muss dann ja nicht alles aufschreiben.

0:13:33.871,0:13:40.796
Aber generell: Wenn der Algorithmus laufen würde, würde er dann aufhören und dann
hätte man tatsächlich alle Fakten, die man aus dem Programm ableiten kann.

0:13:42.480,0:13:46.632
Also der Grundaufbau des Algorithmus ist ganz einfach,
ich wiederhole das noch einmal kurz:

0:13:47.431,0:13:52.447
Wir gehen einfach durch, beim ersten Mal mit der leeren Menge
und nehmen uns einfach alle Fakten heraus, die wir so bekommen können.

0:13:52.728,0:13:55.018
Also die wo einfach nur Konstanten drin stehen ...

0:13:56.810,0:14:06.144
und bei allen anderen Schritten danach nehmen wir unsere abgeleiteten Fakten,
die wir von vorher hatten und setzen die dann, wenn möglich, in die Regeln ein
und leiten daraus dann das Nächste ab.

0:14:06.607,0:14:15.870
Und dabei immer nur die Sachen benutzen, die wir im vorherigen Schritt hatten.
Also, wenn wir in T_p3 sind können wir nur Fakten aus T_p2 verwenden.
