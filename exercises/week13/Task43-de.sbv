0:00:00.000,0:00:08.160
Für Aufgabe 43 sollen wir jetzt
Ableitungsbäume aufstellen für

0:00:08.160,0:00:16.980
die Queries, die hier angegeben sind und ist
Programm was ja membership von Listen prüft.

0:00:16.980,0:00:19.740
Also ist ein Element X irgendwie in einer Liste.

0:00:19.740,0:00:26.610
Und wir haben hier die Listen
über cons und nil kodiert.

0:00:26.610,0:00:30.870
Damit das mit der Unifkation ein
bisschen klarer ist, als wenn wir

0:00:30.870,0:00:35.010
jetzt die Prolog Listensyntax verwenden,
dann ist immer ein bisschen schwierig zu

0:00:35.010,0:00:41.700
sehen wo jetzt der Kopf des Ausdrucks ist
und was mit was unifiziert werden muss.

0:00:41.700,0:00:49.080
Deswegen haben wir es hier einfach
mal mit cons und nil gegeben.

0:00:49.080,0:00:51.210
Wir haben drei Queries und
sollen jetzt einfach mal

0:00:51.210,0:00:57.720
angucken wie die Ableitungsbäume dazu aussehen.

0:01:02.040,0:01:08.460
Das heißt, wir fangen mit unserem
ersten Query an und das haben

0:01:08.460,0:01:11.850
wir in Aufgabe 42 schon gesehen, wie
das mit der Resolution funktioniert.

0:01:11.850,0:01:23.220
Was wir jetzt machen ist im Prinzip; wir nehmen
immer den linkesten Teil unseres Queries und gehen

0:01:23.220,0:01:28.470
der Reihe nach durch und gucken mit welchen
Programmklauseln wir den unifizieren können.

0:01:28.470,0:01:38.020
Unser Query hat jetzt nur ein element im
Moment, deswegen nehmen wir auf jeden Fall das.

0:01:38.020,0:01:42.370
Und das Erste was wir machen
ist, wir prüfen das gegen die

0:01:42.370,0:01:48.700
erste Programmklausel, also das mem(X,cons(X,Xs)).

0:01:48.700,0:01:58.150
Den Fakt sozusagen, das Element ist in der
Liste, wenn es das erste Element der Liste ist.

0:01:58.150,0:02:02.740
Dann bilden wir den most generel unifier dafür.

0:02:04.420,0:02:06.250
Das auch nicht nicht sonderlich kompliziert.

0:02:06.250,0:02:08.560
Mit ein bisschen genauer Hingucken sieht man,

0:02:09.970,0:02:16.090
das erste cons ist das einzige cons was in
dem Query vorkommt, bzw. in der Klausel.

0:02:16.090,0:02:24.490
Und dann muss X1 2 sein, XS1
ist der Rest der Liste und weil

0:02:24.490,0:02:32.620
X1 zweimal vorkommt in der Klausel ist X auch 2.

0:02:32.620,0:02:38.020
Und dann; Die rechte Seite haben wir nicht.

0:02:38.020,0:02:40.690
Das heißt wir ersetzen jetzt das was wir aus

0:02:40.690,0:02:45.355
dem Query genommen haben mit der
rechten Seite, also entfernen es.

0:02:45.355,0:02:57.550
Und wenden den Unifikator an und das
heißt, wir haben dann den leeren Query.

0:02:57.550,0:03:02.230
Und von dem leeren Query haben wir
alles erfüllen können und dann gucken

0:03:02.230,0:03:09.730
wir rückwärts was die Werte sind die unsere
Variablen in dem Original-Query jetzt haben.

0:03:09.730,0:03:12.490
Dann geht es im Prinzip jetzt
darum herauszufinden, was

0:03:12.490,0:03:14.320
das X in dem Original-Query für einen Wert hat.

0:03:14.320,0:03:17.440
Und das ist ja genau in dem Unifikator drin.

0:03:17.440,0:03:22.420
X wird durch 2 ersetzt, also muss x 2 sein.

0:03:22.420,0:03:27.160
Dadurch haben wir jetzt für unsere Variable
aus dem Query herausgefunden was der Wert ist.

0:03:27.160,0:03:30.610
Es sind wir natürlich noch nicht fertig,

0:03:30.610,0:03:35.710
weil wir hätten ja auch die zweite
Programmklausel nehmen können.

0:03:39.190,0:03:42.340
Wenn wir das machen, also wenn
wir zurückgehen zu unserem

0:03:42.340,0:03:46.360
Original-Query, wo wir die Möglichkeit hatten
die erste oder die zweite Klausel zu wählen,

0:03:46.360,0:03:49.270
und jetzt die Zweite wählen, dann
machen wir wieder die Unifikation.

0:03:49.270,0:03:53.800
Das ist auch hier wieder nicht kompliziert.

0:03:53.800,0:04:03.520
Allerdings ist der Unterschied hier
jetzt, dass ja das erste Element

0:04:03.520,0:04:13.900
der Liste in der Programmklausel
fängt mit Y1 an und nicht mit X1.

0:04:13.900,0:04:22.510
Das heißt, wir können jetzt keinen Wert
direkt für X inferieren oder bestimmen,

0:04:22.510,0:04:34.720
sondern wir ersetzen einfach X durch X1,
Y1 durch 2 und XS1 durch cons(3,nil).

0:04:34.720,0:04:46.870
Und ersetzen jetzt den Query durch
die rechte Seite der Klausel, also

0:04:46.870,0:04:48.970
bzw. das was wir unifiziert haben in dem Query.

0:04:48.970,0:04:54.670
Wenn da noch mehr stehen würde, würde das
was da noch mehr steht natürlich bleiben.

0:04:57.610,0:05:06.010
Und dann setzen wir die rechte
Seite von der Klausel jetzt ein,

0:05:06.010,0:05:20.650
entsprechend mit dem Unifikator angewandt
und bekommen dann unserer neuen Query.

0:05:20.650,0:05:26.710
Nehmen den jetzt wieder und prüfen den
wieder gegen beide Programmklauseln.

0:05:26.710,0:05:35.830
Also führen wieder frische Variablen ein,
machen die Unifikation und stellen jetzt

0:05:35.830,0:05:42.970
in diesem Fall fest, dass wir jetzt
für den Fall, dass wir nach dem ersten

0:05:42.970,0:05:48.370
Element gucken, haben wir genau wieder
den fall wie gerade im ersten Schritt.

0:05:48.370,0:05:55.990
Wir wissen jetzt plötzlich wieder was X1 ist,
nämlich 3, weil das sozusagen über X2 um die

0:05:55.990,0:06:05.950
Ecke an X1 weitergeleitet werden muss, damit
es gleich ist wenn wir den Unifikator anwenden.

0:06:05.950,0:06:10.990
Wir haben wieder keine
rechte Seite für die Klausel,

0:06:10.990,0:06:13.930
das heißt der Query der rauskommt ist leer.

0:06:13.930,0:06:17.170
Das heißt, wir haben ein Ergebnis
gefunden, und jetzt verfolgen wir

0:06:17.170,0:06:22.060
einfach zurück oder je nachdem wie man
das macht, von vorne oder nach hinten.

0:06:22.060,0:06:27.490
Und gucken uns an; wir wollen dort den
wert für X wissen, X wird durch X1 ersetzt.

0:06:27.490,0:06:29.440
Dann müssen wir also gucken was X1 ist.

0:06:29.440,0:06:31.360
X1 wird danach durch 3 ersetzt.

0:06:32.920,0:06:34.360
Dann ist X also 3.

0:06:34.360,0:06:38.140
Könnt ihr natürlich jetzt auch
andersrum durch gehen und gucken,

0:06:38.140,0:06:44.080
sozusagen für alles was man Werte eingesetzt
hat, was davon kommt denn im Query oben an.

0:06:44.080,0:06:50.680
Das ist manchmal einfacher, manchmal komplizierter
als von oben nach unten durch zu gehen.

0:06:50.680,0:06:51.640
Muss man immer ein Bisschen gucken.

0:06:54.900,0:06:57.540
Aber wir sind natürlich noch nicht fertig.

0:06:57.540,0:06:58.860
Auch wenn man sich jetzt denken kann,

0:06:58.860,0:07:01.410
das sind wahrscheinlich die
einzigen Ergebnisse die rauskommen.

0:07:01.410,0:07:06.810
Aber wir haben ja noch die Möglichkeit für
den Query, den wir uns gerade angeguckt haben,

0:07:06.810,0:07:11.070
also einen Schritt vorher, die
andere Programmklausel auszuwählen.

0:07:11.070,0:07:17.730
Das müssen wir natürlich, um den vollständigen
Ableitungsbaum zu machen, auch noch betrachten.

0:07:17.730,0:07:22.080
Das heißt, wir führen wieder frische
Variablen dafür ein, unifizieren das,

0:07:22.080,0:07:34.740
bekommen im Prinzip so was ähnliches raus wie bei
dem ersten Query in unserem zweiten Schritt, nur,

0:07:34.740,0:07:38.160
dass wir jetzt als Restliste nur noch nil haben.

0:07:38.160,0:07:45.630
Bekommen dann einen Query, bei dem wir wieder,

0:07:45.630,0:07:54.600
wenn wir den Unifikator einsetzen
entsprechend mem(X2,nil) haben.

0:07:54.600,0:08:04.380
Und jetzt können wir das versuchen wieder
mit beiden Programmenklauseln zu unifizieren,

0:08:04.380,0:08:08.730
stellen aber fest, das zweite
Argument für das Prädikate ist nil.

0:08:08.730,0:08:15.330
Und in unserem Klauseln haben wir
jedes Mal aber nur cons da stehen.

0:08:15.330,0:08:17.310
Das geht also nicht.

0:08:17.310,0:08:28.460
Das heißt, in beiden Fällen
finden wir keinen Unifikator und,

0:08:28.460,0:08:34.250
das heißt im Großen und Ganzen wir können
jetzt keine weiteren Schritte machen.

0:08:34.250,0:08:39.710
Das heißt, hier schlägt sozusagen
die Resolution jetzt fehl.

0:08:39.710,0:08:47.270
Und wir sind am Ende, weil wir keine
weiteren Schritte machen können,

0:08:47.270,0:08:49.280
wir haben keine Optionen
mehr die wir machen können.

0:08:49.280,0:08:59.210
Die Aufgabenstellung sagt jetzt noch, dass wir
uns das Ganze mal im Prolog angucken sollen.

0:09:00.980,0:09:04.760
Dafür wechseln wir einfach
mal auf die Kommandozeile.

0:09:04.760,0:09:12.200
Wir laden das einfach mal in
den Prolog Interpreter und

0:09:12.200,0:09:20.480
stellen jetzt erstmal ganz normal den Query um zu
gucken, haben wir das denn auch richtig gemacht.

0:09:20.480,0:09:23.345
Wir fragen an mem(X,cons(2,cons(3,nil))).

0:09:23.345,0:09:41.105
Dann erhalten wir als erste Ergebnis 2.

0:09:41.105,0:09:43.190
Das sieht schon mal ganz gut aus.

0:09:43.190,0:09:45.410
Dann als zweites Ergebnis 3.

0:09:45.410,0:09:48.410
Und jetzt sollte das wahrscheinlich
false zurückgeben... Genau.

0:09:48.410,0:09:53.630
Das scheinen wir schon mal
nicht verkehrt gemacht zu haben.

0:09:53.630,0:10:01.700
Jetzt aktivieren wir mal, wie in dem
Aufgabenstellung gefordert, den Trace-Modus.

0:10:01.700,0:10:04.850
Und stellen den ganzen Query noch mal.

0:10:04.850,0:10:09.140
Und dann sehen wir was Prolog
hinter den Kulissen sozusagen macht.

0:10:09.140,0:10:15.710
Okay, das Erste ist: Wir haben diesen
Call, das ist unsere Ausgangs-Query.

0:10:15.710,0:10:20.240
Prolog ersetzt jetzt die Variable X hier
durch irgendwie so eine interne Variablen.

0:10:20.240,0:10:22.310
Das sind immer diese Unterstrichen
mit irgendwelchen Nummern.

0:10:22.310,0:10:27.290
Das sind verschiedene
Variablen die Prolog benutzt.

0:10:27.290,0:10:33.740
Und das ganze hier ist jetzt unser
Ausgangs-Query, den wir hier oben haben.

0:10:35.330,0:10:36.530
Was machen wir als nächstes?

0:10:36.530,0:10:43.520
Prolog findet heraus, indem es
jetzt gegen die Klauseln hin prüft,

0:10:43.520,0:10:53.420
ich könnte 2 für X einsetzen, und dann komme
ich beim leeren Query raus und bin fertig.

0:10:54.380,0:10:57.950
Dann geht Prolog zurück und guckt
was sind denn die Ersetzung,

0:10:57.950,0:11:04.310
die dafür gemacht wurden und dann
kommt das erste Ergebnis 2 raus.

0:11:04.310,0:11:12.650
OK, wenn wir jetzt weiter gehen kommen
wir wieder bei dem Query vom Anfang an.

0:11:12.650,0:11:15.260
Also das was wir auch in
unserem Baum gemacht haben.

0:11:15.260,0:11:19.610
Wir sind hier fertig gehen einen Schritt
zurück, da gab es ja noch eine andere Option.

0:11:20.210,0:11:29.030
Dann finden wir heraus, dass wir mit der zweiten
Programmklausel den nächsten Query haben können.

0:11:29.030,0:11:31.040
Das ist dann der Schritt hier.

0:11:35.970,0:11:41.370
Da sehen wir dann, dass wir wieder mit der

0:11:41.370,0:11:48.960
ersten Programmklausel fertig
werden können mit unserm Query.

0:11:48.960,0:11:56.580
Propagieren das jetzt hoch, um zu gucken was
unser ursprüngliches X für einen Wert hat.

0:11:56.580,0:12:00.060
Genauso wie wir hier auch die
Substitution zurück verfolgt haben.

0:12:00.060,0:12:03.150
Bekommen jetzt unser Ergebnis 3 raus.

0:12:03.150,0:12:10.230
Und dann gehen wir noch mal zurück, weil bei
dem Query hatten wir ja noch eine Möglichkeit.

0:12:10.230,0:12:12.030
Also das ist jetzt dieser Query hier.

0:12:12.030,0:12:16.830
Da haben wir wieder die Möglichkeit
was anderes auszuprobieren.

0:12:16.830,0:12:32.520
Da bekommen wir unseren Query
hier unten mit dem nil am Ende.

0:12:32.520,0:12:35.880
Stellen dann fest, wie wir
eben auch festgestellt habe,

0:12:35.880,0:12:39.120
da kann man mit dem Klauseln die wir im
Programm haben nichts mehr unifizieren.

0:12:39.120,0:12:47.820
Und dann guckt das System nach,

0:12:47.820,0:12:50.100
gab es noch irgendwo was wir sind
noch nicht ausprobiert haben?

0:12:50.100,0:12:50.820
Nein, okay.

0:12:50.820,0:12:53.430
Also das sind wir bei false angekommen.

0:12:53.430,0:13:00.750
Das heißt, was wir jetzt sehen ist, dass Prolog,
genau wie wir den Baum hier aufgebaut haben,

0:13:00.750,0:13:09.150
so ein links nach rechts Tiefensuchen-Traversal
durch den Ableitungsbaum macht.

0:13:09.150,0:13:12.750
Erst hier die linke Seite
ausprobiert, so tief runter geht.

0:13:12.750,0:13:23.040
Dann zu der nächst höheren alternativ Option
zurückgegangen, da so weit es geht ausprobiert.

0:13:23.040,0:13:28.476
Immer mit dem ersten Teil
des Queries, und so weiter.

0:13:28.476,0:13:35.310
Das heißt, wir kriegen die drei
Lösungen genau in dieser Reihenfolge.

0:13:35.310,0:13:43.860
Okay, für die anderen beiden Teilaufgaben
funktioniert das ganze jetzt analog.

0:13:43.860,0:13:48.000
Das machen wir jemand nicht im Detail.

0:13:48.000,0:13:53.850
Die Lösungen sind auch in dem collection.pdf
zu finden, wie das auszusehen hat.

0:13:53.850,0:13:58.110
Aber es ist auf jeden Fall empfehlenswert, wenn
man das noch nicht gemacht hat, das auf jeden

0:13:58.110,0:14:05.040
Fall auch mindestens einmal, am Besten sogar 2, 3,
4, 5 Mal für unterschiedliche Queries zu machen.

0:14:05.040,0:14:08.400
Damit man ein Gefühl dafür
kriegt wie das funktioniert,

0:14:08.400,0:14:13.770
weil das sieht zwar alles sehr logisch aus,
aber wenn man dann tatsächlich guckt und die

0:14:13.770,0:14:18.600
Variablennamen handhaben muss, zum Beispiel,
immer die frischen Variablen einführen usw.,

0:14:18.600,0:14:24.960
kann es recht schnell unübersichtlich werden,
wenn man es nicht mal selbstständig gemacht hat.

0:14:24.960,0:14:27.690
Daher auf jeden Fall als Tipp für die Klausur:

0:14:27.690,0:14:36.180
Einfach mal machen und danach mit den
Lösungen im collection.pdf vergleichen.

0:14:36.180,0:14:40.860
Oder direkt vergleichen wenn
man das schon gemacht hat.
