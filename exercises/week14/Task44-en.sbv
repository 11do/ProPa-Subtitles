0:00:00.049,0:00:03.790
To this exercise video.

0:00:03.790,0:00:13.830
This exercise is about the derivation trees,
and furthermore, it's about the 'not' in Prolog.

0:00:13.830,0:00:18.470
We have been given a program up here.

0:00:18.470,0:00:27.340
The program consists of four lines, the Prolog
program.

0:00:27.340,0:00:32.529
We shall now draw the derivation trees for
the follow inquiries.

0:00:32.529,0:00:45.219
First of all, for disjoint of the list, [1,
2, 3], and the list [4,2].

0:00:45.219,0:00:53.219
Just as a short reminder, we have the not
here used in our program and also in these

0:00:53.219,0:00:54.219
queries.

0:00:54.219,0:01:01.440
But it's the same as the \+ which we've seen
in the lecture.

0:01:01.440,0:01:05.980
That was also mentioned that this is the same.

0:01:05.980,0:01:10.509
\+ Goal is the same as not (Goal).

0:01:10.509,0:01:19.360
We stick to this syntax here within these
videos.

0:01:19.360,0:01:24.810
Let's choose this first query here, disjoint
([1,2 3], [4, 2]).

0:01:24.810,0:01:27.950
This is the root of our tree.

0:01:27.950,0:01:41.500
We ask for this query, and now we try to think
about the-, or draw the derivation tree.

0:01:41.500,0:01:53.340
Therefore, we check all the queries we have
in order to search for possible follows of

0:01:53.340,0:01:56.079
this query here.

0:01:56.079,0:02:02.630
First of all, we have member X.

0:02:02.630,0:02:13.250
Our member and disjoint is not matching at
all, so we do not need to consider the member

0:02:13.250,0:02:19.750
fact or the other member line.

0:02:19.750,0:02:26.220
We can skip that one and we can go directly
to disjoint.

0:02:26.220,0:02:33.140
Disjoint doesn't match because we do not have
an empty list here.

0:02:33.140,0:02:38.900
The other line matches because we have a list
which consists of at least one element and

0:02:38.900,0:02:40.300
another list.

0:02:40.300,0:02:44.310
That's why we can consider this line.

0:02:44.310,0:02:48.660
We do a unification now, but first of all,
we do a renaming.

0:02:48.660,0:02:59.129
We have these new letters inserted here, and
now we do a unification with the left-hand

0:02:59.129,0:03:04.540
side of this line and our query.

0:03:04.540,0:03:08.950
Then we get a most general unifier.

0:03:08.950,0:03:12.730
X1 shall be replaced by 1.

0:03:12.730,0:03:18.870
XS1 by [2,3] and YS1 by [4,2].

0:03:18.870,0:03:26.380
We insert the most general unifier into the
right-hand side.

0:03:26.380,0:03:35.800
Now we get another query which consists of
this party now insert with the appropriate

0:03:35.800,0:03:39.939
well use from our most general unifier.

0:03:39.939,0:03:48.670
Now we consider the left-hand side of our
query because we have a conjunction here.

0:03:48.670,0:03:50.769
I separate by comma.

0:03:50.769,0:03:53.250
We consider first the first part.

0:03:53.250,0:04:01.799
The first part of this query is using not.

0:04:01.799,0:04:09.210
In this case, we go into a side branch considering
the knot.

0:04:09.210,0:04:24.310
We do this by just considering the query by
just considering the not part but removing

0:04:24.310,0:04:27.680
the not.

0:04:27.680,0:04:36.350
Now we are using (member (1, [4,2])), which
was here in the not.

0:04:36.350,0:04:41.710
We tried to match this one to our program.

0:04:41.710,0:05:02.130
There we have the first rule, which is a fact,
and which we cannot apply because there is

0:05:02.130,0:05:07.639
a mismatch with 1 and 4, but we can apply
it to the second line here.

0:05:07.639,0:05:16.850
Again, we do the renaming part, and then we
get a most general unifier replacing X or

0:05:16.850,0:05:19.770
matching X2 to 1.

0:05:19.770,0:05:25.160
I choose fresh names again here.

0:05:25.160,0:05:36.620
X2 by 1, Y2 by 4, and XS2 is matched by the
list of 2.

0:05:36.620,0:05:43.470
Then we can insert the right-hand side in
the next line and we get member (1, [2]).

0:05:43.470,0:05:52.400
Then we can again check where it is matching
in our program and then we see it's not matching

0:05:52.400,0:05:58.710
in the first line because 1 and 2 is not the
same so we get go to the second line where

0:05:58.710,0:06:00.060
we can match it again.

0:06:00.060,0:06:02.360
We get fresh â€¦ #00:06:01#.

0:06:02.360,0:06:04.920
We get a new most general unifier.

0:06:04.920,0:06:17.130
We replace X3 by 1, Y3 by 2, and XS3 by the
empty list so that we match exactly this part

0:06:17.130,0:06:18.620
here.

0:06:18.620,0:06:27.910
One the list 1,2 and the empty list, which
is exactly that here.

0:06:27.910,0:06:31.620
Then we can insert it into the right side.

0:06:31.620,0:06:38.610
We insert one in the empty list and we get
this query here.

0:06:38.610,0:06:52.910
Now we can check our program again and we
can check the member parts here.

0:06:52.910,0:07:05.410
We see that cannot match the first square
because it doesn't apply here for there is

0:07:05.410,0:07:14.250
now 1 in this list at the first element so
we cannot apply this fact here.

0:07:14.250,0:07:25.379
We cannot apply this rule here because well,
we have an empty list so we do not have a

0:07:25.379,0:07:36.210
list with no element and we cannot apply the
disjoint parts because they do not to match

0:07:36.210,0:07:39.120
with member.

0:07:39.120,0:07:44.280
That's why we are done here.

0:07:44.280,0:07:47.340
We cannot finish this query.

0:07:47.340,0:07:54.340
We cannot resolve this.

0:07:54.340,0:07:59.320
Because of this failure here, we can continue
in the other side here.

0:07:59.320,0:08:06.080
We use the disjoint part because this year
the inner part of the not was failing.

0:08:06.080,0:08:09.240
The not part was succeeding.

0:08:09.240,0:08:17.030
We can now look into the disjoint on the right-hand
side of the query above here.

0:08:17.030,0:08:29.550
Now we can match this again
with our rules again.

0:08:29.550,0:08:38.849
Just to be very clear, we cannot choose any
other branches here in these cases because

0:08:38.849,0:08:42.080
the member parts do not match with this joint.

0:08:42.080,0:08:49.320
For the same reason we couldn't continue here,
we cannot have other branches here as well.

0:08:49.320,0:09:03.250
Now we have this joint here as the next one
that we want to match.

0:09:03.250,0:09:09.440
We can skip the member rule rules and we can
look at the disjoint rules.

0:09:09.440,0:09:15.700
We can skip this one because it doesn't apply,
but this rule applies here.

0:09:15.700,0:09:23.650
We rename the arrivals, then we get our most
general unifier by saying X4 matches to 2

0:09:23.650,0:09:30.920
and XS4 matches to 3 and YS4 matches to [4,2].

0:09:30.920,0:09:34.270
That's our most general unifier.

0:09:34.270,0:09:38.910
Then we replace the right-hand side to get
the new query.

0:09:38.910,0:09:48.200
This again is not member part on the left-hand
side.

0:09:48.200,0:09:56.980
Because of the not, again, we have to handle
another sub query in a side branch.

0:09:56.980,0:10:06.080
We do put this member here into the side branch
and consider just this part.

0:10:06.080,0:10:10.649
Now we can match again here against our member
rules.

0:10:10.649,0:10:18.070
The first rule doesn't apply in this case,
but we can apply the second rule and match

0:10:18.070,0:10:22.480
it with the fresh arrivals here.

0:10:22.480,0:10:35.040
We get a most general unifier so that we can
match X5 by 2, Y5 to 4 and XS5 to 2.

0:10:35.040,0:10:48.070
We get
this most general unifier and we insert it

0:10:48.070,0:10:55.320
into the right-hand side, the member rule
here, the right-hand side.

0:10:55.320,0:11:01.649
We get a new query and then we can check for
this query again.

0:11:01.649,0:11:10.890
This time the first rule applies, or this
fact rather, this fact applies because X matches

0:11:10.890,0:11:11.890
here.

0:11:11.890,0:11:25.190
We can get almost general unifier by matching
X6 to 2 and XS6 to the empty list and thus

0:11:25.190,0:11:27.779
we succeed.

0:11:27.779,0:11:36.390
But because we succeed in the side branch,
we fail in the main branch.

0:11:36.390,0:11:42.250
That's where we stop our search because we
have failed.

0:11:42.250,0:11:47.330
Now we can check just if you missed something
in other branches.

0:11:47.330,0:11:54.389
In this disjoint branch we already checked
all our disjoint rules so there is nothing

0:11:54.389,0:11:55.810
left to check.

0:11:55.810,0:12:01.620
Also, the same applies in this disjoint query
here above.

0:12:01.620,0:12:05.610
We cannot have any more side branches.

0:12:05.610,0:12:14.620
This is the complete derivation tree for the
first query.

0:12:14.620,0:12:23.810
Let's get to the next part, which is the second
query.

0:12:23.810,0:12:31.850
This query is the disjoint ([1, 2, 3], Xs)
query.

0:12:31.850,0:12:39.720
We proceed by matching this query to our program
rules.

0:12:39.720,0:12:52.029
We cannot match it to the member rules because
member and disjoint are not unifiable and

0:12:52.029,0:12:55.290
we cannot match it against this line.

0:12:55.290,0:13:04.839
Again, this doesn't match, but we can get
a most general unifier for the last rule here.

0:13:04.839,0:13:15.060
Get fresh names here and we match then get
a most general unifier here between disjoint

0:13:15.060,0:13:21.370
([1, 2, 3], Xs) and the left-hand side.

0:13:21.370,0:13:32.800
X1 is 1, XS1 is the list of 2 and 3 and YS1
matches to Xs.

0:13:32.800,0:13:34.339
Here two options possible.

0:13:34.339,0:13:40.490
We could replace YS1 by Xs or Xs by YS1.

0:13:40.490,0:13:45.620
I replace Xs by YS1 here.

0:13:45.620,0:13:48.010
We get a new query.

0:13:48.010,0:13:58.699
This one is the right-hand side just with
the replaced values from the most general

0:13:58.699,0:14:03.430
unifier.

0:14:03.430,0:14:12.800
Then we have again a query with the conjunction.

0:14:12.800,0:14:18.949
We have a comma in our query and we consider
the first part first.

0:14:18.949,0:14:27.740
This contains not, so we have to have a side
branch where we check the member and with

0:14:27.740,0:14:29.399
the inner part of the not.

0:14:29.399,0:14:34.959
The member (1, YS1) is checked in a side branch.

0:14:34.959,0:14:39.560
This one we match against our rules.

0:14:39.560,0:14:48.180
The first rule actually applies because we
can find actually an answer to this query

0:14:48.180,0:14:51.120
by picking the first rule.

0:14:51.120,0:14:59.029
We rename the variables here and get a most
general unifier because now we see it.

0:14:59.029,0:15:05.430
We can match X2 and replace it or match it
to 1.

0:15:05.430,0:15:19.300
When we do so, then we match YS1 to the list
of 1 and another list of XS2.

0:15:19.300,0:15:23.850
That's our result.

0:15:23.850,0:15:25.449
This is a fact.

0:15:25.449,0:15:29.529
That's why we are done here already.

0:15:29.529,0:15:33.560
We have checked this branch and know we are
done.

0:15:33.560,0:15:39.190
Because this is the side branch for the not,
we do not have to check any further.

0:15:39.190,0:15:50.509
We know there is a result, which immediately
means we fail in the main part of the query.

0:15:50.509,0:16:00.970
Thus, we have an arrow here in this case for
the disjoint ([1, 2, 3], XS) part.

0:16:00.970,0:16:08.139
This is quite surprising actually because
I think we didn't expect it when we see the

0:16:08.139,0:16:09.630
disjoint rules.

0:16:09.630,0:16:23.779
Or when you think about how disjoint might
work we could find it surprising.

0:16:23.779,0:16:38.490
Actually, we can find a list where there are
Xs such that these lists are not disjoint,

0:16:38.490,0:16:41.759
so it actually makes sense as well.

0:16:41.759,0:16:53.440
We can find a list where 1, 2, or 3 are actually
members, for instance.

0:16:53.440,0:17:00.819
Just endless where the 1 is a member.

0:17:00.819,0:17:05.270
We are done here with this part of the task.

0:17:05.270,0:17:14.039
Now there's the last part left, which is the
C part.

0:17:14.039,0:17:23.709
Now we considered not, not which was discussed
in the lecture already.

0:17:23.709,0:17:32.360
This is the part where we get an unexpected
result properly because it's not the double

0:17:32.360,0:17:39.570
negation logic that we have in product, but
it's this specific logic which happens here

0:17:39.570,0:17:41.950
in Prolog.

0:17:41.950,0:17:48.039
We choose this query here and then we will
see the results actually when you perform

0:17:48.039,0:17:49.220
it.

0:17:49.220,0:17:58.559
When we have this query here, then we have
in the first case a not at the beginning.

0:17:58.559,0:18:03.470
This query is in the not.

0:18:03.470,0:18:11.810
We open a side branch where we check the inner
part of the not.

0:18:11.810,0:18:17.350
This is again, a part where we have not at
the beginning and there's something inside.

0:18:17.350,0:18:24.510
Again, we open another side branch where we
check what's inside the not.

0:18:24.510,0:18:31.240
Now we check the disjoint here.

0:18:31.240,0:18:46.220
The disjoint Xs for 2.

0:18:46.220,0:18:55.409
We cannot apply the member rules, but we can
apply the disjoint.

0:18:55.409,0:19:06.230
We can apply the fact here in fact already
because Xs can be the empty list.

0:19:06.230,0:19:14.120
We can apply this rule here and then we are
done already.

0:19:14.120,0:19:26.320
We replace the arrivals in our query using
the most general unifier and then we are actually

0:19:26.320,0:19:29.590
done already.

0:19:29.590,0:19:33.580
This one is true.

0:19:33.580,0:19:36.429
We have got the success.

0:19:36.429,0:19:40.500
Then we fail in this case because we are of
the not.

0:19:40.500,0:19:47.840
Because we fail in this case because of the
not, we succeed in this case and the result

0:19:47.840,0:19:52.880
of our query is actually true.

0:19:52.880,0:20:02.260
We do not get results for access here in this
case because access is checked inside here.

0:20:02.260,0:20:14.480
While we could find the empty list here as
a result but we do not actually get the result

0:20:14.480,0:20:22.970
because the side queries are what we replace
inside here is withdrawn because the arrival

0:20:22.970,0:20:28.330
is bound inside, which is discussed in more
detail in the lecture.

0:20:28.330,0:20:37.630
We are just getting the true here and now
actually reliable spec from Prolog.

0:20:37.630,0:20:42.770
That was the third part of the task.

0:20:42.770,0:20:46.320
We are done with this exercise task.
